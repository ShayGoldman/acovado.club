services:
  postgres:
    extends:
      file: ../../infra/postgres/docker-compose.yaml
      service: postgres
    env_file:
      - ${ENV_FILES_ROOT}/postgres.env
    environment:
      POSTGRES_USER: production
      POSTGRES_PASSWORD: production
      POSTGRES_DB: production
    volumes:
      - ${VOLUMES_ROOT}/postgres-data:/var/lib/postgresql/data
    networks:
      - proxy-network

  # TODO Drizzle studio maybe?

  rabbitmq:
    extends:
      file: ../../infra/rabbitmq/docker-compose.yaml
      service: rabbitmq
    env_file:
      - ${ENV_FILES_ROOT}/rabbitmq.env
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
    networks:
      - proxy-network

  grafana:
    extends:
      file: ../../infra/tracing/docker-compose.yaml
      service: grafana
    env_file:
      - ${ENV_FILES_ROOT}/grafana.env
    volumes:
      - ${CONFIG_FILES_ROOT}/infra/tracing/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    ports: []
    networks:
      - proxy-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.acovado.club`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=acovado'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
      - 'traefik.http.routers.grafana.middlewares=auth'
    depends_on:
      - jaeger
      - tempo
      - otel-collector

  otel-collector:
    extends:
      file: ../../infra/tracing/docker-compose.yaml
      service: otel-collector
    env_file:
      - ${ENV_FILES_ROOT}/otel-collector.env
    volumes:
      - ${CONFIG_FILES_ROOT}/infra/tracing/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports: []
    networks:
      - proxy-network
    depends_on:
      - tempo

  jaeger:
    extends:
      file: ../../infra/tracing/docker-compose.yaml
      service: jaeger
    env_file:
      - ${ENV_FILES_ROOT}/jaeger.env
    ports: []
    networks:
      - proxy-network
    depends_on:
      - tempo
      - otel-collector
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jaeger.rule=Host(`jaeger.acovado.club`)'
      - 'traefik.http.routers.jaeger.entrypoints=websecure'
      - 'traefik.http.routers.jaeger.tls.certresolver=acovado'
      - 'traefik.http.services.jaeger.loadbalancer.server.port=16686'
      - 'traefik.http.routers.jaeger.middlewares=auth'
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '1gb'

  prometheus:
    extends:
      file: ../../infra/tracing/docker-compose.yaml
      service: prometheus
    env_file:
      - ${ENV_FILES_ROOT}/prometheus.env
    volumes:
      - ${CONFIG_FILES_ROOT}/infra/tracing/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports: []
    networks:
      - proxy-network

  tempo:
    extends:
      file: ../../infra/tracing/docker-compose.yaml
      service: tempo
    env_file:
      - ${ENV_FILES_ROOT}/tempo.env
    ports: []
    command: [-config.file=/etc/tempo.yaml]
    volumes:
      - ${CONFIG_FILES_ROOT}/infra/tracing/tempo.yaml:/etc/tempo.yaml
      - ${VOLUMES_ROOT}/tempo-data:/tmp/tempo
    networks:
      - proxy-network

  stats:
    image: portainer/portainer-ce:2.25.1-alpine
    container_name: stats
    ports: []
    networks:
      - proxy-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /srv/volumes/stats:/data
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.stats.rule=Host(`stats.acovado.club`)'
      - 'traefik.http.routers.stats.entrypoints=websecure'
      - 'traefik.http.routers.stats.tls.certresolver=acovado'
      - 'traefik.http.services.stats.loadbalancer.server.port=9000'
      - 'traefik.http.routers.stats.middlewares=auth'

networks:
  proxy-network:
    external: true
